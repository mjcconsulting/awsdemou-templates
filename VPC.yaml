AWSTemplateFormatVersion: 2010-09-09
Description: VPC Template.
  This creates a VPC.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - PublicHostedZoneStackName
      - Label:
          default: Resource Dependencies
        Parameters:
          - KeyPairName
      - Label:
          default: Environment Configuration
        Parameters:
          - EnvironmentName
          - EnvironmentType
          - UseRedundantNatGateways
      - Label:
          default: VPC Configuration
        Parameters:
          - Network
          - PrivateDomain
    ParameterLabels:
      PublicHostedZoneStackName:
        default: PublicHostedZone Stack Name
      KeyPairName:
        default: KeyPair Name
      EnvironmentName:
        default: Environment Name
      EnvironmentType:
        default: Environment Type
      UseRedundantNatGateways:
        default: Use Redundant NAT Gateways
      Network:
        default: Network
      PrivateDomain:
        default: Private Domain
Parameters:
  PublicHostedZoneStackName:
    Description: Name of the CloudFormation Stack containing the Public HostedZone
    Type: String
    MaxLength: 64
    Default: PublicHostedZone
    AllowedPattern: (^$|^[A-Z][-a-zA-Z0-9]*$)
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  KeyPairName:
    Description: Name of an existing KeyPair to enable SSH access to the Instances
    Type: AWS::EC2::KeyPair::KeyName
    MaxLength: 32
    Default: administrator
    AllowedPattern: (^$|^[_a-zA-Z0-9]*$)
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  EnvironmentName:
    Description: Name of the Environment associated with the Stack
    Type: String
    Default: Production
    AllowedValues:
      - Build
      - Production
      - Development
    ConstraintDescription: must be Build, Production or Development.
  EnvironmentType:
    Description: Type of the Environment to build. Used to select size-related options in Mappings
    Type: String
    Default: medium
    AllowedValues:
      - small
      - medium
      - large
      - xlarge
      - 2xlarge
    ConstraintDescription: must be small, medium, large, xlarge or 2xlarge.
  UseRedundantNatGateways:
    Description: Use redundant NAT Gateways
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    ConstraintDescription: must be true or false.
  Network:
    Description: VPC Network
    Type: String
    Default: 10.32.0.0/21
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[8-9]|2[0-2]))$
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/18-22.
  PrivateDomain:
    Description: Private Domain associated with the Stack
    Type: String
    MinLength: 7
    MaxLength: 64
    Default: us-west-2.awsdemou.com
    AllowedPattern: ^((?!-)[a-z0-9-]{1,63}(?<!-)\.)+[a-z]{2,10}$
    ConstraintDescription: must be a valid DNS domain name.
Mappings:
  StandardSubnetCalculationMap:
    CidrBits:
      small: 4
      medium: 5
      large: 6
      xlarge: 7
      2xlarge: 8
  UtilitySubnetCalculationMap:
    CidrCount:
      small: 16
      medium: 32
      large: 64
      xlarge: 128
      2xlarge: 256
    AZAOffset:
      small: 3
      medium: 7
      large: 15
      xlarge: 31
      2xlarge: 63
    AZBOffset:
      small: 7
      medium: 15
      large: 31
      xlarge: 63
      2xlarge: 127
    AZCOffset:
      small: 11
      medium: 23
      large: 47
      xlarge: 95
      2xlarge: 191
Conditions:
  ConfigurePublicHostedZone: !Not [ !Equals [ !Ref PublicHostedZoneStackName, '' ]]
  ConfigureKeyPair: !Not [ !Equals [ !Ref KeyPairName, '' ]]
  ConfigureRedundantNatGateways: !Equals [ !Ref UseRedundantNatGateways, true ]
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref Network
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PrivateHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig:
        Comment: !Sub Private Zone for ${PrivateDomain}
      Name: !Sub ${PrivateDomain}.
      VPCs:
        - VPCId: !Ref VPC
          VPCRegion: !Ref AWS::Region
      HostedZoneTags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateHostedZone
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !Ref PrivateDomain
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DHCPOptions
  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref DHCPOptions
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnetA
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 16, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnetB
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 32, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnetC
  WebSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]] ]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebSubnetA
  WebSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 18, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebSubnetB
  WebSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 34, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebSubnetC
  ApplicationSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 4, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]] ]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ApplicationSubnetA
  ApplicationSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 20, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ApplicationSubnetB
  ApplicationSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 36, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ApplicationSubnetC
  DatabaseSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 8, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]] ]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DatabaseSubnetA
  DatabaseSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 24, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DatabaseSubnetB
  DatabaseSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 40, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DatabaseSubnetC
  EndpointSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Cidr [ !Select [ !FindInMap [ UtilitySubnetCalculationMap, AZAOffset, !Ref EnvironmentType ], !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ UtilitySubnetCalculationMap, CidrCount, !Ref EnvironmentType ], 6 ] ], 2, 5 ] ]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-EndpointSubnetA
  EndpointSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Cidr [ !Select [ !FindInMap [ UtilitySubnetCalculationMap, AZBOffset, !Ref EnvironmentType ], !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ UtilitySubnetCalculationMap, CidrCount, !Ref EnvironmentType ], 6 ] ], 2, 5 ] ]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-EndpointSubnetB
  EndpointSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Cidr [ !Select [ !FindInMap [ UtilitySubnetCalculationMap, AZCOffset, !Ref EnvironmentType ], !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ UtilitySubnetCalculationMap, CidrCount, !Ref EnvironmentType ], 6 ] ], 2, 5 ] ]
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-EndpointSubnetC
  ManagementSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 2, !Cidr [ !Select [ !FindInMap [ UtilitySubnetCalculationMap, AZAOffset, !Ref EnvironmentType ], !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ UtilitySubnetCalculationMap, CidrCount, !Ref EnvironmentType ], 6 ] ], 4, 4 ] ]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ManagementSubnetA
  ManagementSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 2, !Cidr [ !Select [ !FindInMap [ UtilitySubnetCalculationMap, AZBOffset, !Ref EnvironmentType ], !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ UtilitySubnetCalculationMap, CidrCount, !Ref EnvironmentType ], 6 ] ], 4, 4 ] ]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ManagementSubnetB
  ManagementSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 2, !Cidr [ !Select [ !FindInMap [ UtilitySubnetCalculationMap, AZCOffset, !Ref EnvironmentType ], !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ UtilitySubnetCalculationMap, CidrCount, !Ref EnvironmentType ], 6 ] ], 4, 4 ] ]
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ManagementSubnetC
  GatewaySubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 3, !Cidr [ !Select [ !FindInMap [ UtilitySubnetCalculationMap, AZAOffset, !Ref EnvironmentType ], !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ UtilitySubnetCalculationMap, CidrCount, !Ref EnvironmentType ], 6 ] ], 4, 4 ] ]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-GatewaySubnetA
  GatewaySubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 3, !Cidr [ !Select [ !FindInMap [ UtilitySubnetCalculationMap, AZBOffset, !Ref EnvironmentType ], !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ UtilitySubnetCalculationMap, CidrCount, !Ref EnvironmentType ], 6 ] ], 4, 4 ] ]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-GatewaySubnetB
  GatewaySubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 3, !Cidr [ !Select [ !FindInMap [ UtilitySubnetCalculationMap, AZCOffset, !Ref EnvironmentType ], !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ UtilitySubnetCalculationMap, CidrCount, !Ref EnvironmentType ], 6 ] ], 4, 4 ] ]
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-GatewaySubnetC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicRouteTable
  PublicDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: InternetGatewayAttachment
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable
  WebSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WebSubnetA
      RouteTableId: !Ref PublicRouteTable
  WebSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WebSubnetB
      RouteTableId: !Ref PublicRouteTable
  WebSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WebSubnetC
      RouteTableId: !Ref PublicRouteTable
  NatAEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: InternetGatewayAttachment
  NatBEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: InternetGatewayAttachment
    Condition: ConfigureRedundantNatGateways
  NatCEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: InternetGatewayAttachment
    Condition: ConfigureRedundantNatGateways
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatAEIP.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT-GatewayA
  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatBEIP.AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT-GatewayB
    Condition: ConfigureRedundantNatGateways
  NatGatewayC:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatCEIP.AllocationId
      SubnetId: !Ref PublicSubnetC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT-GatewayC
    Condition: ConfigureRedundantNatGateways
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRouteTableA
  PrivateDefaultRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
  ApplicationSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref ApplicationSubnetA
  DatabaseSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref DatabaseSubnetA
  EndpointSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref EndpointSubnetA
  ManagementSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref ManagementSubnetA
  GatewaySubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref GatewaySubnetA
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRouteTableB
  PrivateDefaultRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !If [ ConfigureRedundantNatGateways, !Ref NatGatewayB, !Ref NatGatewayA ]
  ApplicationSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref ApplicationSubnetB
  DatabaseSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref DatabaseSubnetB
  EndpointSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref EndpointSubnetB
  ManagementSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref ManagementSubnetB
  GatewaySubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref GatewaySubnetB
  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRouteTableC
  PrivateDefaultRouteC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !If [ ConfigureRedundantNatGateways, !Ref NatGatewayC, !Ref NatGatewayA ]
  ApplicationSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref ApplicationSubnetC
  DatabaseSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref DatabaseSubnetC
  EndpointSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref EndpointSubnetC
  ManagementSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref ManagementSubnetC
  GatewaySubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref GatewaySubnetC
Outputs:
  VPC:
    Description: The VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC
  VPCName:
    Description: The VPC Name
    Value: !Ref EnvironmentName
    Export:
      Name: !Sub ${AWS::StackName}-VPCName
  VPCNetwork:
    Description: The VPC Network
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: !Sub ${AWS::StackName}-VPCNetwork
  VPCPublicDomain:
    Description: The VPC Public Domain
    Value: !ImportValue
      Fn::Sub: ${PublicHostedZoneStackName}-PublicDomain
    Export:
      Name: !Sub ${AWS::StackName}-VPCPublicDomain
    Condition: ConfigurePublicHostedZone
  VPCPrivateDomain:
    Description: The VPC Private Domain
    Value: !Ref PrivateDomain
    Export:
      Name: !Sub ${AWS::StackName}-VPCPrivateDomain
  PublicHostedZone:
    Description: The Public HostedZone
    Value: !ImportValue
      Fn::Sub: ${PublicHostedZoneStackName}-PublicHostedZone
    Export:
      Name: !Sub ${AWS::StackName}-PublicHostedZone
    Condition: ConfigurePublicHostedZone
  PrivateHostedZone:
    Description: The Private HostedZone
    Value: !Ref PrivateHostedZone
    Export:
      Name: !Sub ${AWS::StackName}-PrivateHostedZone
  PublicSubnetA:
    Description: The Public Subnet in Availability Zone A
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetA
  PublicSubnetB:
    Description: The Public Subnet in Availability Zone B
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetB
  PublicSubnetC:
    Description: The Public Subnet in Availability Zone C
    Value: !Ref PublicSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetC
  WebSubnetA:
    Description: The Web Subnet in Availability Zone A
    Value: !Ref WebSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-WebSubnetA
  WebSubnetB:
    Description: The Web Subnet in Availability Zone B
    Value: !Ref WebSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-WebSubnetB
  WebSubnetC:
    Description: The Web Subnet in Availability Zone C
    Value: !Ref WebSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-WebSubnetC
  ApplicationSubnetA:
    Description: The Application Subnet in Availability Zone A
    Value: !Ref ApplicationSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationSubnetA
  ApplicationSubnetB:
    Description: The Application Subnet in Availability Zone B
    Value: !Ref ApplicationSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationSubnetB
  ApplicationSubnetC:
    Description: The Application Subnet in Availability Zone C
    Value: !Ref ApplicationSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationSubnetC
  DatabaseSubnetA:
    Description: The Database Subnet in Availability Zone A
    Value: !Ref DatabaseSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseSubnetA
  DatabaseSubnetB:
    Description: The Database Subnet in Availability Zone B
    Value: !Ref DatabaseSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseSubnetB
  DatabaseSubnetC:
    Description: The Database Subnet in Availability Zone C
    Value: !Ref DatabaseSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseSubnetC
  EndpointSubnetA:
    Description: The Endpoint Subnet in Availability Zone A
    Value: !Ref EndpointSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-EndpointSubnetA
  EndpointSubnetB:
    Description: The Endpoint Subnet in Availability Zone B
    Value: !Ref EndpointSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-EndpointSubnetB
  EndpointSubnetC:
    Description: The Endpoint Subnet in Availability Zone C
    Value: !Ref EndpointSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-EndpointSubnetC
  ManagementSubnetA:
    Description: The Directory Subnet in Availability Zone A
    Value: !Ref ManagementSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-ManagementSubnetA
  ManagementSubnetB:
    Description: The Directory Subnet in Availability Zone B
    Value: !Ref ManagementSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-ManagementSubnetB
  ManagementSubnetC:
    Description: The Directory Subnet in Availability Zone C
    Value: !Ref ManagementSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-ManagementSubnetC
  GatewaySubnetA:
    Description: The Gateway Subnet in Availability Zone A
    Value: !Ref GatewaySubnetA
    Export:
      Name: !Sub ${AWS::StackName}-GatewaySubnetA
  GatewaySubnetB:
    Description: The Gateway Subnet in Availability Zone B
    Value: !Ref GatewaySubnetB
    Export:
      Name: !Sub ${AWS::StackName}-GatewaySubnetB
  GatewaySubnetC:
    Description: The Gateway Subnet in Availability Zone C
    Value: !Ref GatewaySubnetC
    Export:
      Name: !Sub ${AWS::StackName}-GatewaySubnetC
  PublicRouteTable:
    Description: The Public RouteTable
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub ${AWS::StackName}-PublicRouteTable
  PrivateRouteTableA:
    Description: The Private RouteTable in Availability Zone A
    Value: !Ref PrivateRouteTableA
    Export:
      Name: !Sub ${AWS::StackName}-PrivateRouteTableA
  PrivateRouteTableB:
    Description: The Private RouteTable in Availability Zone B
    Value: !Ref PrivateRouteTableB
    Export:
      Name: !Sub ${AWS::StackName}-PrivateRouteTableB
  PrivateRouteTableC:
    Description: The Private RouteTable in Availability Zone C
    Value: !Ref PrivateRouteTableC
    Export:
      Name: !Sub ${AWS::StackName}-PrivateRouteTableC
